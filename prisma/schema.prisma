generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String     @id @default(cuid())
  name              String?
  email             String?    @unique
  emailVerified     DateTime?
  username          String?    @unique
  image             String?
  birthday          String?
  password          String?
  signUpDate        DateTime   @default(now())
  updatedDate       DateTime   @updatedAt
  accounts          Account[]
  sessions          Session[]
  createdShops      Shop[]     @relation("UserToShop")
  createdCategories Category[] @relation("UserToCategory")
  createdProducts   Product[]  @relation("UserToProduct")
  createdImages     Image[]    @relation("UserToImage")

  @@unique([email, username])
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  description String
  slug        String?
  creatorId   String
  creator     User       @relation("UserToShop", fields: [creatorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categories  Category[] @relation("ShopToCategory")
  products    Product[]  @relation("ShopToProduct")
  orders      Order[]    @relation("ShopToOrder")

  @@unique([slug])
}

model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String
  images    Image[]   @relation("CategoryToImage")
  creatorId String
  creator   User      @relation("UserToCategory", fields: [creatorId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  shopId    String
  shop      Shop      @relation("ShopToCategory", fields: [shopId], references: [id])
  products  Product[] @relation("CategoryToProduct")

  @@unique([slug])
}

model Product {
  id           String      @id @default(cuid())
  name         String
  slug         String
  images       Image[]     @relation("ProductToImage")
  price        Decimal
  description  String
  categorySlug String
  category     Category    @relation("CategoryToProduct", fields: [categorySlug], references: [slug])
  creatorId    String
  creator      User        @relation("UserToProduct", fields: [creatorId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  shopId       String
  shop         Shop        @relation("ShopToProduct", fields: [shopId], references: [id])
  orderItems   OrderItem[] @relation("ProductToOrderItem")

  @@unique([slug, categorySlug])
}

model Image {
  id           String   @id @default(cuid())
  url          String
  productId    String?
  product      Product? @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)
  categorySlug String
  category     Category @relation("CategoryToImage", fields: [categorySlug], references: [slug], onDelete: Cascade)
  creatorId    String
  creator      User     @relation("UserToImage", fields: [creatorId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([url])
}

model Order {
  id         String      @id @default(cuid())
  shopId     String
  shop       Shop        @relation("ShopToOrder", fields: [shopId], references: [id])
  orderItems OrderItem[] @relation("OrderToOrderItem")
  isPaid     Boolean     @default(false)
  phone      String
  address    String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation("OrderToOrderItem", fields: [orderId], references: [id])
  productId String
  product   Product @relation("ProductToOrderItem", fields: [productId], references: [id])
}
